#include <LiquidCrystal.h>                      //Importa a biblioteca e define os pinos que serão utilizados para ligação ao display
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

const int BUTTON_SETUP = 10;                      //Botão no pino 10
const int BUTTON_UP = 8;                          //Botão no pino 8
const int BUTTON_DOWN = 9;                        //Botão no pino 9
const int BACKLIGHT = 7;                          //Backlight do display no pino 7
const int MOVEMENT = 6;                           //Sensor de presença

int portion = 200;                                //Porção a ser colocada para o PET;
int time_remain = 21600;                          //Valor temporal para controle do sistema
int showtime = 0;                                 //Tempo a ser exibido no display
int setup_mode = 1;                               //Valor relacionado ao estado do menu
int setup_on = 0;                                 //Estado do sistema de menu
int time_running = 0;                             //Decisão de correr o tempo
int feed = 0;                                     //Variável para acionamento do motor
boolean startdecision = false;                    //Decisão tomada pelo usuário ao final da configuração

void setup() 
{
  Serial.begin(9600);
  pinMode(BUTTON_DOWN,INPUT);                     //Definindo as entradas e saídas, inicializando o LCD e o monitor serial.
  pinMode(BUTTON_SETUP,INPUT);            
  pinMode(BUTTON_UP,INPUT); 
  pinMode(BACKLIGHT, OUTPUT);
  pinMode(MOVEMENT, INPUT);  
  lcd.begin(16, 2);                     
}

void loop()
{
  lcd.clear();
  delay(200);
  //Serial.print (digitalRead(BUTTON_SETUP));     //Coloquei uns valores pro monitor serial e acho uma boa pro debug. Posso colocar umas condições depois.
  //Serial.print (setup_mode);
  Serial.print (setup_on);
  if (digitalRead(BUTTON_SETUP)==HIGH)            //Lógica para ligar/desligar o sistema
    { setup_mode++;
      if (setup_on==0)
        {
          setup_on=1;
        }      
      if (setup_mode>3)                           //Se o estado do setup for maior que 3, deve voltar pro primeiro estado. Assim, garanto que só vai ficar nas telas de tempo, quantidade e 
        {                                         //se deve alimentar agora. 
          setup_mode=0;
          setup_on=0;
          time_running=1;
        }
     }
  
 
 if (setup_on==0)                                 //Estados do sistema
   {                                              //Se desligado, apagar o backlight; mostrar que está ativo através da mensagem de funcionamento.
     digitalWrite(BACKLIGHT,LOW);
     lcd.setCursor(4, 1);
     lcd.print("iFIFI");
     if (time_running==1)                         //Contagem regressiva para alimentação
       { 
         for (time_remain;time_remain>=0;time_remain--)
            {
              delay(1000);
              if (time_remain==0)
                {
                  feed=1;
                }
            }
        }
//     if (feed==1)                                //Acionamento do motor com base nas condições desejadas
//       { 
//          if (digitalRead(MOVEMENT)==HIGH)         //* significa que precisa ser declarado
//            {
//             if (weight* < portion)                //FALTA COLOCAR A LÓGICA PRO CÁLCULO EXATO DE PESO, PRECISA CALIBRAR O SENSOR PRA ISSO.
//                { ATIVAR O MOTOR
//                }
//            }      
//       }
   }

 if (setup_on==1)                                  //Se ligado, mostrar menu de configuração; Ativar o backlight.
   { if (setup_mode==1)
       {
         digitalWrite(BACKLIGHT,HIGH);
         lcd.setCursor(4, 0);
         lcd.print("SETUP");          
         delay(3000);
         lcd.setCursor(4, 0);
         lcd.print("INTERVALO");                   //Menu para configuração do intervalo.
         lcd.setCursor(7, 1);
         lcd.print("6 HORAS");
         if (digitalRead(BUTTON_DOWN)==HIGH)
           {  
             if (time_remain > 7200)
               { 
                 time_remain=time_remain-7200;
                 showtime=time_remain/3600;
                 lcd.setCursor(7, 1);
                 lcd.print(showtime);
                 lcd.print("HORAS");
               }     
           }
         if (digitalRead(BUTTON_UP)==HIGH)
           {
             if (time_remain < 43200)
               { 
                 time_remain=time_remain+7200;
                 showtime=time_remain/3600;
                 lcd.setCursor(7, 1);
                 lcd.print(showtime);
                 lcd.print("HORAS");
               }
           }
       }
     if (setup_mode==2)                            //Menu para configuração da quantidade.
       { 
         lcd.setCursor(4, 0);
         lcd.print("QUANTIDADE");
         lcd.setCursor(7, 1);
         lcd.print("200g");
         if (digitalRead(BUTTON_DOWN)==HIGH)
           { 
             if (portion > 50)
               { 
                 portion=portion-150;
                 lcd.setCursor(7, 1);
                 lcd.print(portion);
                 lcd.print("g");
               }     
           }
         if (digitalRead(BUTTON_UP)==HIGH)
           {
             if (portion < 500)
               { 
                 portion=portion+150;
                 lcd.setCursor(7, 1);
                 lcd.print(portion);
                 lcd.print("g");          
               }
            }
       }
       
     if (setup_mode==3)                            //Menu para configuração da decisão de alimentar agora ou não.
       { 
         lcd.setCursor(4, 0);
         lcd.print("DESEJA ALIMENTAR AGORA?");
         lcd.setCursor(7, 1);
         lcd.print("NAO");
         if (digitalRead(BUTTON_DOWN)==HIGH || digitalRead(BUTTON_UP)==HIGH)
           { 
             startdecision!=startdecision;
           }
         if (startdecision==true)
           { 
             lcd.setCursor(7, 1);
             lcd.print("SIM");
           }
         else
           { 
             lcd.setCursor(7, 1);
             lcd.print("NAO");
           }     
       }
   
    }
}
